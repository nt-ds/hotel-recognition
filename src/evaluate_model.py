# -*- coding: utf-8 -*-
"""evaluate_models.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L0-PsuBZ5-JvYje5dcDuChF2MczIkC2z
"""

import itertools
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

from keras.callbacks import Callback
from sklearn.metrics import classification_report, confusion_matrix

def plot_confusion_matrix(real_labels,
                          predicted_labels,
                          target_names,
                          title="Confusion Matrix",
                          cmap=None,
                          normalize=True):
    
    """
    Plot confusion matrix and print classification report
    
    Arguments
    ---------
    real_labels:      test images' real labels
    
    predicted_labels: test images' predicted labels
    
    target_names:     given classification classes such as [0, 1, 2]
                      the class names, for example: ["Comfort Inn", "Best Western", "Hilton"]
    
    Optional Arguments
    ------------------
    title:            the text to display at the top of the matrix
    
    cmap:             the gradient of the values displayed from matplotlib.pyplot.cm
                      see http://matplotlib.org/examples/color/colormaps_reference.html
                      plt.get_cmap('jet') or plt.cm.Blues
                      
    normalize:        if False, plot the raw numbers
                      if True, plot the proportions
                      
    Citiation
    ---------
    http://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html
    
    """
    
    
    cm = confusion_matrix(real_labels, predicted_labels)
    accuracy = np.trace(cm) / float(np.sum(cm))
    misclass = 1 - accuracy
    
    if cmap is None:
        cmap = plt.get_cmap("Blues")
    
    plt.figure(figsize=(8, 6))
    plt.imshow(cm, interpolation="nearest", cmap=cmap)
    plt.title(title)
    plt.colorbar()
    
    if target_names is not None:
        tick_marks = np.arange(len(target_names))
        plt.xticks(tick_marks, target_names, rotation=45)
        plt.yticks(tick_marks, target_names)
        
    if normalize:
        cm = cm.astype("float") / cm.sum(axis=1)[:, np.newaxis]    
    
    thresh = cm.max() / 1.5 if normalize else cm.max() / 2
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        if normalize:
            plt.text(j, i, "{:0.4f}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")
        else:
            plt.text(j, i, "{:,}".format(cm[i, j]),
                     horizontalalignment="center",
                     color="white" if cm[i, j] > thresh else "black")
    
    plt.tight_layout()
    plt.ylabel("True Label")
    plt.xlabel("Predicted Label\naccuracy={:0.4f}; misclass={:0.4f}".format(accuracy, misclass))
    plt.show()
    
    print(classification_report(real_labels, predicted_labels, target_names=target_names))

"""Source: [Plot a Confusion Matrix](https://www.kaggle.com/grfiv4/plot-a-confusion-matrix)"""